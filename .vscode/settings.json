{
    "files.associations": {
        "algorithm": "cpp",
        "any": "cpp",
        "array": "cpp",
        "atomic": "cpp",
        "bit": "cpp",
        "cctype": "cpp",
        "charconv": "cpp",
        "chrono": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "compare": "cpp",
        "concepts": "cpp",
        "condition_variable": "cpp",
        "coroutine": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "deque": "cpp",
        "exception": "cpp",
        "resumable": "cpp",
        "filesystem": "cpp",
        "format": "cpp",
        "forward_list": "cpp",
        "fstream": "cpp",
        "functional": "cpp",
        "future": "cpp",
        "initializer_list": "cpp",
        "iomanip": "cpp",
        "ios": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "iterator": "cpp",
        "limits": "cpp",
        "list": "cpp",
        "locale": "cpp",
        "map": "cpp",
        "memory": "cpp",
        "memory_resource": "cpp",
        "mutex": "cpp",
        "new": "cpp",
        "numeric": "cpp",
        "optional": "cpp",
        "ostream": "cpp",
        "random": "cpp",
        "ratio": "cpp",
        "regex": "cpp",
        "set": "cpp",
        "source_location": "cpp",
        "span": "cpp",
        "sstream": "cpp",
        "stack": "cpp",
        "stacktrace": "cpp",
        "stdexcept": "cpp",
        "stdfloat": "cpp",
        "stop_token": "cpp",
        "streambuf": "cpp",
        "string": "cpp",
        "system_error": "cpp",
        "thread": "cpp",
        "tuple": "cpp",
        "type_traits": "cpp",
        "typeinfo": "cpp",
        "unordered_map": "cpp",
        "unordered_set": "cpp",
        "utility": "cpp",
        "variant": "cpp",
        "vector": "cpp",
        "xfacet": "cpp",
        "xhash": "cpp",
        "xiosbase": "cpp",
        "xlocale": "cpp",
        "xlocbuf": "cpp",
        "xlocinfo": "cpp",
        "xlocmes": "cpp",
        "xlocmon": "cpp",
        "xlocnum": "cpp",
        "xloctime": "cpp",
        "xmemory": "cpp",
        "xstring": "cpp",
        "xtr1common": "cpp",
        "xtree": "cpp",
        "xutility": "cpp",
        "*.h": "cpp",
        "*.hpp": "cpp",
        "*.cpp": "cpp",
        "CMakeLists.txt": "cmake",
        "shared_mutex": "cpp",
        "qcloseevent": "cpp"
    },
    "cmake.configureOnOpen": false,
    "cmake.configureArgs": [
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
    ],
    "cmake.generator": "Visual Studio 17 2022",
    "cmake.configureSettings": {
        "CMAKE_GENERATOR_PLATFORM": "Win32"
    },
    "cmake.buildDirectory": "${workspaceFolder}/build",
    // Исправляем пути include
    "C_Cpp.default.includePath": [
        "${workspaceFolder}/src/**"
    ],
    "C_Cpp.default.defines": [
        "_DEBUG",
        "UNICODE",
        "_UNICODE",
        "WIN32_LEAN_AND_MEAN"
    ],
    "C_Cpp.default.cppStandard": "c++20",
    "C_Cpp.default.intelliSenseMode": "windows-msvc-x86",
    "github.copilot.enable": {
        "*": true,
        "plaintext": true,
        "markdown": true,
        "cpp": true,
        "cmake": true
    },
    "editor.foldingStrategy": "indentation",
    "editor.folding": true,
    "editor.foldingImportsByDefault": true,
    "[cpp]": {
        "editor.foldingStartMarker": "^\\s*/\\*\\*(?!/)\\s*$",
        "editor.foldingStopMarker": "^\\s*\\*/$",
        "editor.defaultFormatter": "xaver.clang-format",
        "editor.formatOnSave": true
    },
    "editor.foldingHighlight": true,
    "editor.showFoldingControls": "always",
    "editor.hideFoldedSymbols": true,
    "editor.comments.collapsed": true,
    "editor.comments.ignoreEmptyLines": true,
    "editor.comments.insertSpace": true,
    "editor.inlayHints.enabled": "on",
    "editor.inlayHints.padding": true,
    "editor.hover.above": false,
    "editor.guides.bracketPairs": true,
    "editor.stickyScroll.enabled": true,
    "editor.lineNumbers": "on",
    "editor.glyphMargin": true,
    "editor.comments.visible": false,
    "C_Cpp.enhancedColorization": "enabled",
    "C_Cpp.inlayHints.parameterNames.enabled": true,
    "github.copilot.chat.codeGeneration.useInstructionFiles": true,
    "github.copilot.chat.localeOverride": "ru",
    "github.copilot.chat.codesearch.enabled": true,
    "github.copilot.chat.reviewSelection.instructions": [],
    "github.copilot.chat.commitMessageGeneration.instructions": [],
    "chat.agent.maxRequests": 15,
    "githubPullRequests.experimental.chat": false,
    "editor.tokenColorCustomizations": {
        "comments": "",
        "textMateRules": []
    },
    "chat.setupFromDialog": true,
    "c-cpp-flylint.cppcheck.enable": true,
    "c-cpp-flylint.cppcheck.platform": "win32A",
    "c-cpp-flylint.cppcheck.standard": [
        "c++20"
    ],
    "c-cpp-flylint.cppcheck.suppressions": [
        "missingInclude"
    ],
    "c-cpp-flylint.cppcheck.severityLevels": {
        "error": "Error",
        "warning": "Warning",
        "style": "Information",
        "performance": "Information",
        "portability": "Information",
        "information": "Information"
    },
    "editor.formatOnSave": true,
    "C_Cpp.formatting": "clangFormat",
    "C_Cpp.clang_format_path": "clang-format",
    "C_Cpp.clang_format_style": "file",
    // Настройки C/C++ Advanced Lint
    "c-cpp-flylint.clang.enable": false, // Отключаем clang пока
    "c-cpp-flylint.flexelint.enable": false,
    "c-cpp-flylint.lizard.enable": false,
    "c-cpp-flylint.flawfinder.enable": false,
    // Настройки CppCheck в рамках C/C++ Advanced Lint
    "c-cpp-flylint.cppcheck.enable": true,
    "c-cpp-flylint.cppcheck.platform": "win32A",
    "c-cpp-flylint.cppcheck.standard": [
        "c++20"
    ],
    "c-cpp-flylint.cppcheck.severityLevels": {
        "error": "Error",
        "warning": "Warning",
        "style": "Hint", // Понижаем уровень style до Hint
        "performance": "Hint", // Понижаем уровень performance до Hint
        "portability": "Hint", // Понижаем уровень portability до Hint
        "information": "Hint" // Понижаем уровень information до Hint
    ],
    "c-cpp-flylint.cppcheck.suppressions": [
        "missingInclude", // Игнорируем ошибки отсутствующих системных включений
        "unusedFunction", // Игнорируем предупреждения о неиспользуемых функциях
        "noExplicitConstructor", // Игнорируем предупреждения о неявных конструкторах
        "unmatchedSuppression" // Игнорируем предупреждения о неиспользованных подавлениях
    ],
    "c-cpp-flylint.cppcheck.verbose": false, // Уменьшаем количество выводимой информации
    "c-cpp-flylint.cppcheck.addons": [],
    // Исправляем пути include
    "c-cpp-flylint.cppcheck.includePaths": [
        "${workspaceFolder}/src"
    ],
    // Общие настройки C/C++ Advanced Lint
    "c-cpp-flylint.run": "onType", // Проверка при вводе кода
    "c-cpp-flylint.debug": false, // Отключаем отладочные сообщения
    "c-cpp-flylint.excludeFromWorkspacePaths": [
        "build/**" // Исключаем папку build из проверки
    ],
    // Clang-Tidy
    "C_Cpp.codeAnalysis.clangTidy.enabled": true,
    "C_Cpp.codeAnalysis.runAutomatically": false, // Переключаем на ручной режим
    "C_Cpp.codeAnalysis.exclude": [
        "${workspaceFolder}/build/**"
    ],
    // Отключаем clang в C/C++ Advanced Lint, так как будем использовать встроенную поддержку clang-tidy
    "c-cpp-flylint.clang.enable": false,
    // Настройки clang-tidy в C/C++ расширении
    "C_Cpp.codeAnalysis.clangTidy.enabled": true,
    "C_Cpp.codeAnalysis.clangTidy.path": "clang-tidy",
    "C_Cpp.codeAnalysis.runAutomatically": false, // Переключаем на ручной режим
    "C_Cpp.codeAnalysis.exclude": [
        "${workspaceFolder}/build/**"
    ],
    "C_Cpp.codeAnalysis.clangTidy.checks.enabled": [
        "bugprone-*",
        "cert-*",
        "clang-analyzer-*",
        "cppcoreguidelines-*",
        "modernize-*",
        "performance-*",
        "readability-*",
        "-modernize-use-trailing-return-type"
    ],
    // Убеждаемся что IntelliSense работает правильно
    "C_Cpp.intelliSense.cachePath": "${workspaceFolder}/build",
    "C_Cpp.default.compileCommands": "${workspaceFolder}/build/compile_commands.json",
    // Дополнительные настройки C++
    "C_Cpp.errorSquiggles": "enabled",
    "C_Cpp.intelliSenseEngine": "default"
}